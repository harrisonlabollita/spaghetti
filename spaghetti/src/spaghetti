#!/usr/bin/env python
#from spaghetti.core.bands import bands
#from spaghetti.core.parse import parse
import glob, sys
from spaghetti.src.struct import *
from spaghetti.src.bands import *

def command_line():
    import argparse
    parser=argparse.ArgumentParser()
    parser.add_argument("--init", dest="init", action="store_true", help="sets up the interactive initialization to create the plot")
    parser.add_argument("--switch", default="bands", type=str)
    parser.add_argument("--ymin", type = float, default = -1.5)
    parser.add_argument("--ymax", type = float, default = 1.5)
    parser.add_argument("--weight", type=int, default=20, help = "weights multiply character by")
    parser.add_argument("--save", default = None, help = "option to save the image")
    args = parser.parse_args()
    return args

def init():
    """interactive intialization of the input file."""
    if os.path.isfile("spaghetti.init"): #check if previous file
        prev=input("Previous spaghetti.init file detected. Continue? (y/n): ")
        if prev=="n":
            sys.exit(1)
    fout=open("spaghetti.init","w")
    structure=struct()
    klabels=input("Enter the klabels that you would like to use (Ex - Gamma X M Gamma): ")
    fout.write("klabels= {}\n".format(klabels))
    fatband=input("Do you wish to plot fatbands? (y/n) ")
    if fatband == "y":
        if len(glob.glob("*.qtl")) == 0:
            print("you will need a qtl file for this!")
            sys.exit(1)
        if len(glob.glob("*.struct")) == 0:
            print("you will need a struct file for this!")
            sys.exit(1)
        msg="""From the available struct file: {}\nWe found the following:.""".format(structure.filename)
        print(msg)
        for ia, a in enumerate(structure.atoms):
            print("{:^5s} {:^5s} {:^5s}".format(str(ia+1), str(structure.atoms[a][0]), str(structure.atoms[a][1])))
        atoms=list(map(int, input("Please enter a list of atoms: ").split()))
        fout.write("atoms= {}\n".format(str(atoms)))
        print("""Now enter the index of the orbital that you would like to plot.""")
        qtl_msg=[line for line in open(glob.glob("*.qtl")[0]).readlines() if "JATOM" in line] 
        print("".join(qtl_msg))
        orbitals=[list(map(int, input("orbital-character for atom {}: ".format(a)))) for a in atoms]
        fout.write("orbtials= {}\n".format(str(orbitals)))
        # ask about colors, weight, etc
        colors=input("Enter a list of colors (leave blank for default): ")
        fout.write("colors= {}\n".format(colors))
        weight=input("Enter a weight (default=20): ")
        fout.write("weight= {}\n".format(weight))
        fout.close()


if __name__ == "__main__":
    args = command_line()
    if args.init:
        init()
    bands(args)


