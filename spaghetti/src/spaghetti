#!/usr/bin/env python
import glob, sys
from spaghetti.src.w2kstruct import *
from spaghetti.src.bands import *

def command_line():
    import argparse
    parser=argparse.ArgumentParser()
    parser.add_argument("--init", dest="init", action="store_true", help="sets up the interactive initialization to create the plot")
    parser.add_argument("--switch", default="bands", type=str, help="control the program")
    parser.add_argument("--legend", default="center", type=str, choices=["center", "right", "left", "none"], 
                        help="location of the legend")
    parser.add_argument("--ymin", type = float, default = -1.5)
    parser.add_argument("--ymax", type = float, default = 1.5)
    parser.add_argument("--weight", type=int, default=20, help = "weights multiply character by")
    parser.add_argument("--save", default = None, help = "option to save the image")
    args = parser.parse_args()
    return args

def init():
    """interactive intialization of the input file."""
    if os.path.isfile("spaghetti.init"): #check if previous file
        prev=input("Previous spaghetti.init file detected. Continue? (y/n): ")
        if prev=="n":
            return 
    fout=open("spaghetti.init","w")
    structure=struct()
    klabels=input("Enter the klabels that you would like to use (Ex - Gamma X M Gamma): ")
    if len(klabels) > 0: fout.write("klabels= {}\n".format(klabels))
    fatband=input("Do you wish to plot fatbands? (y/n) ")
    if fatband == "y":
        if len(glob.glob("*.qtl")) == 0:
            print("you will need a qtl file for this!")
            sys.exit(1)
        if len(glob.glob("*.struct")) == 0:
            print("you will need a struct file for this!")
            sys.exit(1)
        msg="""From the available struct file: {}\nWe found the following:.""".format(structure.filename)
        print(msg)
        for ia, a in enumerate(structure.atoms):
            print("{:^5s} {:^5s} {:^5s}".format(str(ia+1), str(structure.atoms[a][0]), str(structure.atoms[a][1])))
        atoms=list(map(int, input("Please enter a list of atoms: ").split()))
        fout.write("atoms= {}\n".format(str(atoms)))
        print("""Now enter the index of the orbital that you would like to plot.""")
        qtl_msg=[line for line in open(glob.glob("*.qtl")[0]).readlines() if "JATOM" in line] 
        print("".join(qtl_msg))
        orbitals=[list(map(int, input("orbital(s) for atom {}: ".format(a)).split())) for a in atoms]
        fout.write("orbitals= {}\n".format(str(orbitals)))
        # ask about colors, weight, etc
        colors=input("Enter a list of colors (y/n): ")
        if colors == "y": 
            orb_colors= [[input("color for atom {} orb {}: ".format(str(a), str(o))) for o in orbitals[ia]] for (ia, a) in enumerate(atoms)]
            fout.write("colors= {}\n".format(orb_colors))

        weight=input("Enter a weight (default=20): ")
        if len(weight) > 0: fout.write("weight= {}\n".format(weight))
        fout.close()


if __name__ == "__main__":
    args = command_line()
    if args.init:
        init()
    if args.switch in ["bands", "fatbands"]:
        bands(args)
    elif args.switch in ["fs"]:
        print("Not implemented!")
        sys.exit(1)
